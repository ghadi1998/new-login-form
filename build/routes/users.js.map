{"version":3,"sources":["../../server/routes/users.js"],"names":["express","require","users","Router","cors","jwt","bcrypt","User","use","process","env","SECRET_KEY","post","req","res","today","Date","userData","username","body","first_name","last_name","email","password","created","findOne","where","then","user","hash","err","create","json","status","catch","send","error","compareSync","token","sign","dataValues","expiresIn","get","decoded","verify","headers","id","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,QAAQF,QAAQG,MAAR,EAAd;AACA,IAAMC,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,MAAMJ,QAAQ,cAAR,CAAZ;AACA,IAAMK,SAASL,QAAQ,QAAR,CAAf;;AAEA,IAAMM,OAAON,QAAQ,eAAR,CAAb;AACAC,MAAMM,GAAN,CAAUJ,MAAV;;AAEAK,QAAQC,GAAR,CAAYC,UAAZ,GAAyB,QAAzB;;AAEAT,MAAMU,IAAN,CAAW,SAAX,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClC,MAAMC,QAAQ,IAAIC,IAAJ,EAAd;AACA,MAAMC,WAAW;AACbC,cAAWL,IAAIM,IAAJ,CAASD,QADP;AAEfE,gBAAYP,IAAIM,IAAJ,CAASC,UAFN;AAGfC,eAAWR,IAAIM,IAAJ,CAASE,SAHL;AAIfC,WAAOT,IAAIM,IAAJ,CAASG,KAJD;AAKfC,cAAUV,IAAIM,IAAJ,CAASI,QALJ;AAMfC,aAAST;AANM,GAAjB;;AASAR,OAAKkB,OAAL,CAAa;AACXC,WAAO;AACNR,gBAAUL,IAAIM,IAAJ,CAASD;AADb;AADI,GAAb;AAKE;AALF,GAMGS,IANH,CAMQ,gBAAQ;AACZ,QAAI,CAACC,IAAL,EAAW;AACTtB,aAAOuB,IAAP,CAAYhB,IAAIM,IAAJ,CAASI,QAArB,EAA+B,EAA/B,EAAmC,UAACO,GAAD,EAAMD,IAAN,EAAe;AAChDZ,iBAASM,QAAT,GAAoBM,IAApB;AACAtB,aAAKwB,MAAL,CAAYd,QAAZ,EACGU,IADH,CACQ,gBAAQ;AACZb,cAAIkB,IAAJ,CAAS,EAAEC,QAAQL,KAAKV,QAAL,GAAgB,aAA1B,EAAT;AACD,SAHH,EAIGgB,KAJH,CAIS,eAAO;AACZpB,cAAIqB,IAAJ,CAAS,YAAYL,GAArB;AACD,SANH;AAOD,OATD;AAUD,KAXD,MAWO;AACLhB,UAAIkB,IAAJ,CAAS,EAAEI,OAAO,qBAAT,EAAT;AACD;AACF,GArBH,EAsBGF,KAtBH,CAsBS,eAAO;AACZpB,QAAIqB,IAAJ,CAAS,YAAYL,GAArB;AACD,GAxBH;AAyBD,CApCD;;AAsCA5B,MAAMU,IAAN,CAAW,QAAX,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjCP,OAAKkB,OAAL,CAAa;AACXC,WAAO;AACNR,gBAAUL,IAAIM,IAAJ,CAASD;AADb;AADI,GAAb,EAKGS,IALH,CAKQ,gBAAQ;AACZ,QAAIC,IAAJ,EAAU;AACR,UAAItB,OAAO+B,WAAP,CAAmBxB,IAAIM,IAAJ,CAASI,QAA5B,EAAsCK,KAAKL,QAA3C,CAAJ,EAA0D;AACxD,YAAIe,QAAQjC,IAAIkC,IAAJ,CAASX,KAAKY,UAAd,EAA0B/B,QAAQC,GAAR,CAAYC,UAAtC,EAAkD;AAC5D8B,qBAAW;AADiD,SAAlD,CAAZ;AAGA3B,YAAIqB,IAAJ,CAASG,KAAT;AACD;AACF,KAPD,MAOO;AACLxB,UAAImB,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,EAAEI,OAAO,qBAAT,EAArB;AACD;AACF,GAhBH,EAiBGF,KAjBH,CAiBS,eAAO;AACZpB,QAAImB,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,EAAEI,OAAON,GAAT,EAArB;AACD,GAnBH;AAoBD,CArBD;;AAuBA5B,MAAMwC,GAAN,CAAU,UAAV,EAAsB,UAAC7B,GAAD,EAAMC,GAAN,EAAc;AAClC,MAAI6B,UAAUtC,IAAIuC,MAAJ,CAAW/B,IAAIgC,OAAJ,CAAY,eAAZ,CAAX,EAAyCpC,QAAQC,GAAR,CAAYC,UAArD,CAAd;;AAEAJ,OAAKkB,OAAL,CAAa;AACXC,WAAO;AACLoB,UAAIH,QAAQG;AADP;AADI,GAAb,EAKGnB,IALH,CAKQ,gBAAQ;AACZ,QAAIC,IAAJ,EAAU;AACRd,UAAIkB,IAAJ,CAASJ,IAAT;AACD,KAFD,MAEO;AACLd,UAAIqB,IAAJ,CAAS,qBAAT;AACD;AACF,GAXH,EAYGD,KAZH,CAYS,eAAO;AACZpB,QAAIqB,IAAJ,CAAS,YAAYL,GAArB;AACD,GAdH;AAeD,CAlBD;;AAoBAiB,OAAOC,OAAP,GAAiB9C,KAAjB","file":"users.js","sourcesContent":["const express = require('express')\r\nconst users = express.Router()\r\nconst cors = require('cors')\r\nconst jwt = require('jsonwebtoken')\r\nconst bcrypt = require('bcrypt')\r\n\r\nconst User = require('../model/User')\r\nusers.use(cors())\r\n\r\nprocess.env.SECRET_KEY = 'secret'\r\n\r\nusers.post('/signup', (req, res) => {\r\n  const today = new Date()\r\n  const userData = {\r\n      username : req.body.username,\r\n    first_name: req.body.first_name,\r\n    last_name: req.body.last_name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    created: today\r\n  }\r\n\r\n  User.findOne({\r\n    where: {\r\n     username: req.body.username\r\n    }\r\n  })\r\n    //TODO bcrypt\r\n    .then(user => {\r\n      if (!user) {\r\n        bcrypt.hash(req.body.password, 10, (err, hash) => {\r\n          userData.password = hash\r\n          User.create(userData)\r\n            .then(user => {\r\n              res.json({ status: user.username + 'Registered!' })\r\n            })\r\n            .catch(err => {\r\n              res.send('error: ' + err)\r\n            })\r\n        })\r\n      } else {\r\n        res.json({ error: 'User already exists' })\r\n      }\r\n    })\r\n    .catch(err => {\r\n      res.send('error: ' + err)\r\n    })\r\n})\r\n\r\nusers.post('/login', (req, res) => {\r\n  User.findOne({\r\n    where: {\r\n     username: req.body.username\r\n    }\r\n  })\r\n    .then(user => {\r\n      if (user) {\r\n        if (bcrypt.compareSync(req.body.password, user.password)) {\r\n          let token = jwt.sign(user.dataValues, process.env.SECRET_KEY, {\r\n            expiresIn: 1440\r\n          })\r\n          res.send(token)\r\n        }\r\n      } else {\r\n        res.status(400).json({ error: 'User does not exist' })\r\n      }\r\n    })\r\n    .catch(err => {\r\n      res.status(400).json({ error: err })\r\n    })\r\n})\r\n\r\nusers.get('/profile', (req, res) => {\r\n  var decoded = jwt.verify(req.headers['authorization'], process.env.SECRET_KEY)\r\n\r\n  User.findOne({\r\n    where: {\r\n      id: decoded.id\r\n    }\r\n  })\r\n    .then(user => {\r\n      if (user) {\r\n        res.json(user)\r\n      } else {\r\n        res.send('User does not exist')\r\n      }\r\n    })\r\n    .catch(err => {\r\n      res.send('error: ' + err)\r\n    })\r\n})\r\n\r\nmodule.exports = users"]}